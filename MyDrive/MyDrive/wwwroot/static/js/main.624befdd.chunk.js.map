{"version":3,"sources":["context.js","service.js","loginpage.js","homepage.js","registerpage.js","App.js","reportWebVitals.js","index.js"],"names":["SessionContext","React","createContext","ServiceHost","LoginPage","useState","username","setusername","password","setpassword","authErr","setAuthErr","history","useHistory","context","useContext","loginCallback","response","decoded","jwt_decode","console","log","updateContext","userId","userid","userName","folderId","rootfolderid","token","push","loginErrorCallback","status","to","className","onChange","e","target","value","type","Button","onClick","passwordStream","TextEncoder","encode","Promise","resolve","crypto","subtle","digest","then","hashBuffer","hashHex","Array","from","Uint8Array","map","b","toString","padStart","join","callback","errorcallback","xhr","XMLHttpRequest","onload","onerror","open","send","JSON","stringify","UserName","Password","Login","HomePage","files","setFiles","globalContext","folderid","setRequestHeader","UserId","FolderId","listFolder","list","parse","length","RegisterPage","createAccountCallback","setusercreated","createAccountErrorCallback","errorcode","setusercreateerror","setUserName","password1","setPassword1","password2","setPassword2","usercreated","usercreateerror","disabled","CreateUser","undefined","App","setContext","Provider","newContext","_","defaults","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAEaA,EAAiBC,IAAMC,gB,iCCF9BC,EAAc,2BCWb,SAASC,IAAa,IAAD,EACQC,mBAAS,MADjB,mBACjBC,EADiB,KACPC,EADO,OAEQF,mBAAS,MAFjB,mBAEjBG,EAFiB,KAEPC,EAFO,OAGMJ,oBAAS,GAHf,mBAGjBK,EAHiB,KAGRC,EAHQ,KAKpBC,EAAUC,cAERC,EAAUC,qBAAWf,GAUrBgB,EAAgB,SAACC,GACnB,GAAIA,EAAU,CACV,IAAIC,EAAUC,YAAWF,GACzBG,QAAQC,IAAIP,GACZA,EAAQQ,cAAc,CAClBC,OAAQL,EAAQM,OAChBC,SAAUP,EAAQZ,SAClBoB,SAAUR,EAAQS,aAClBC,MAAOX,IAEXL,EAAQiB,KAAK,UAGblB,GAAW,IAIbmB,EAAqB,SAACC,GACxBpB,GAAW,IAaf,OACI,gCACI,kFACA,0FACA,cAAC,IAAD,CAAMqB,GAAG,YAAT,gCACA,uBACA,uBACA,2CACA,uBAAOC,UAAU,WAAWC,SA/CZ,SAACC,GACrB5B,EAAY4B,EAAEC,OAAOC,UA+CjB,0CACA,uBAAOJ,UAAU,WAAWK,KAAK,WAAWJ,SA7C5B,SAACC,GACrB1B,EAAY0B,EAAEC,OAAOC,UA6CjB,cAACE,EAAA,EAAD,CAAQC,QArBF,WAEV,IAAMC,GAAiB,IAAIC,aAAcC,OAAOnC,GAChDoC,IAAQC,QAAQC,OAAOC,OAAOC,OAAO,UAAWP,IAAiBQ,MAAK,SAAAC,GAClE,IACMC,EADYC,MAAMC,KAAK,IAAIC,WAAWJ,IAClBK,KAAI,SAAAC,GAAC,OAAIA,EAAEC,SAAS,IAAIC,SAAS,EAAG,QAAMC,KAAK,KDvC9E,SAAerD,EAAUE,EAAUoD,EAAUC,GAChD,IAAMC,EAAM,IAAIC,eAChBD,EAAIE,OAAS,kBAAMJ,EAASE,EAAI7C,WAChC6C,EAAIG,QAAU,kBAAMJ,EAAcC,EAAI/B,SACtC+B,EAAII,KAAK,OAAT,UAAoB/D,EAApB,iBACA2D,EAAIK,KAAKC,KAAKC,UAAU,CACpBC,SAAUhE,EACViE,SAAU/D,KCiCNgE,CAAMlE,EAAU6C,EAASnC,EAAec,OAexC,mBACCpB,GAAW,6EChEjB,SAAS+D,IAAY,IAAD,EACGpE,mBAAS,MADZ,mBAChBqE,EADgB,KACTC,EADS,KAYjB7D,EAAUC,qBAAWf,GAE3B,IAAI0E,EAAO,CACP,IAAK5D,EAAQ8D,gBAAkB9D,EAAQ8D,cAAcrD,OACjD,OAAO,cAAC,IAAD,CAAUS,GAAG,YFGzB,SAAoB6C,EAAUrD,EAAQI,EAAOgC,EAAUC,GAC1D,IAAMC,EAAM,IAAIC,eAChBD,EAAIE,OAAS,kBAAMJ,EAASE,EAAI7C,WAChC6C,EAAIG,QAAU,kBAAMJ,EAAcC,EAAI/B,SACtC+B,EAAII,KAAK,OAAT,UAAoB/D,EAApB,eACA2D,EAAIgB,iBAAiB,gBAArB,iBAAgDlD,IAChDkC,EAAIK,KAAKC,KAAKC,UAAU,CACpBU,OAAQvD,EACRwD,SAAUH,KETNI,CACInE,EAAQ8D,cAAcrD,OACtBT,EAAQ8D,cAAclD,SACtBZ,EAAQ8D,cAAchD,OAlBjB,SAACX,GACd,IAAIiE,EAAOd,KAAKe,MAAMlE,GACtB0D,EAASO,MAGS,eAoBtB,OAAIR,GAA0B,IAAjBA,EAAMU,OAIX,iDAAkBV,EAAMU,OAAxB,kBAHI,uEC3BT,SAASC,IACZ,IAUMC,EAAwB,WAC1BC,GAAe,IAGbC,EAA6B,SAACC,GAChCC,EAAmBD,IAhBI,EA+BKpF,mBAAS,MA/Bd,mBA+BpBoB,EA/BoB,KA+BVkE,EA/BU,OAgCOtF,mBAAS,MAhChB,mBAgCpBuF,EAhCoB,KAgCTC,EAhCS,OAiCOxF,mBAAS,MAjChB,mBAiCpByF,EAjCoB,KAiCTC,EAjCS,OAkCW1F,oBAAS,GAlCpB,mBAkCpB2F,EAlCoB,KAkCPT,EAlCO,OAmCmBlF,mBAAS,MAnC5B,mBAmCpB4F,EAnCoB,KAmCHP,EAnCG,KAqC3B,OACI,gCACI,+DACA,uBACA,2CACA,uBAAOzD,UAAU,WAAWC,SAvBZ,SAACC,GACrBwD,EAAYxD,EAAEC,OAAOC,UAuBjB,0CACA,uBAAOJ,UAAU,WAAWK,KAAK,WAAWJ,SArB3B,SAACC,GACtB0D,EAAa1D,EAAEC,OAAOC,UAqBlB,iDACA,uBAAOJ,UAAU,YAAYK,KAAK,WAAWJ,SAnB5B,SAACC,GACtB4D,EAAa5D,EAAEC,OAAOC,UAmBlB,uBACCuD,IAAcE,GACX,qBAAK7D,UAAU,kBAAf,mCAEJ,cAACM,EAAA,EAAD,CAAQ2D,UAAWN,IAAcE,GAAaF,IAAcE,EAAWtD,QAlDzD,WAElB,IAAMC,GAAiB,IAAIC,aAAcC,OAAOiD,GAChDhD,IAAQC,QAAQC,OAAOC,OAAOC,OAAO,UAAWP,IAAiBQ,MAAK,SAAAC,GAClE,IACMC,EADYC,MAAMC,KAAK,IAAIC,WAAWJ,IAClBK,KAAI,SAAAC,GAAC,OAAIA,EAAEC,SAAS,IAAIC,SAAS,EAAG,QAAMC,KAAK,KHb9E,SAAoBrD,EAAUE,EAAUoD,EAAUC,GACrD,IAAMC,EAAM,IAAIC,eAGhBD,EAAIE,OAASJ,EACbE,EAAIG,QAAU,kBAAMJ,EAAcC,EAAI/B,SACtC+B,EAAII,KAAK,OAAT,UAAoB/D,EAApB,eACA2D,EAAIK,KAAK,CACLG,SAAUhE,EACViE,SAAU/D,IGKN2F,CAAW1E,EAAU0B,EAASmC,EAAuBE,OA4CrD,4BAECQ,GACG,8BAAK,2FAA6D,cAAC,IAAD,CAAMhE,GAAG,SAAT,wBAIjD,OAApBiE,QAAgDG,IAApBH,GACzB,8BAAK,6EClCNI,MAxBf,WAAgB,IAAD,EACiBhG,mBAAS,MAD1B,mBACNS,EADM,KACGwF,EADH,KAOb,OACE,cAACtG,EAAeuG,SAAhB,CAAyBlE,MAAO,CAAEuC,cAAe9D,EAASQ,cALtC,SAACkF,GACrBF,EAAWG,IAAEC,SAASF,EAAY1F,MAIlC,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO6F,KAAK,IAAZ,SACE,cAAClC,EAAD,MAEF,cAAC,IAAD,CAAOkC,KAAK,SAAZ,SACE,cAACvG,EAAD,MAEF,cAAC,IAAD,CAAOuG,KAAK,YAAZ,SACE,cAACtB,EAAD,YCfKuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7D,MAAK,YAAkD,IAA/C8D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.624befdd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const SessionContext = React.createContext();\r\n","const ServiceHost = \"https://localhost:44370/\";\r\n\r\nexport function CreateUser(username, password, callback, errorcallback) {\r\n    const xhr = new XMLHttpRequest();\r\n\r\n    // get a callback when the server responds\r\n    xhr.onload = callback;\r\n    xhr.onerror = () => errorcallback(xhr.status);\r\n    xhr.open('POST', `${ServiceHost}createuser`);\r\n    xhr.send({\r\n        UserName: username,\r\n        Password: password,\r\n    });\r\n};\r\n\r\nexport function Login(username, password, callback, errorcallback) {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.onload = () => callback(xhr.response);\r\n    xhr.onerror = () => errorcallback(xhr.status);\r\n    xhr.open('POST', `${ServiceHost}authenticate`);\r\n    xhr.send(JSON.stringify({\r\n        UserName: username,\r\n        Password: password,\r\n    }));\r\n}\r\n\r\nexport function listFolder(folderid, userid, token, callback, errorcallback) {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.onload = () => callback(xhr.response);\r\n    xhr.onerror = () => errorcallback(xhr.status);\r\n    xhr.open('POST', `${ServiceHost}listfolder`);\r\n    xhr.setRequestHeader('Authorization', `Bearer ${token}`);\r\n    xhr.send(JSON.stringify({\r\n        UserId: userid,\r\n        FolderId: folderid,\r\n    }));\r\n}\r\n\r\nexport function CreateFolder(userid, parentfolderid, foldername) {\r\n\r\n};\r\n\r\nexport function UploadFile(userid, folderid, files, token) {\r\n\r\n}","\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { Button } from 'react-bootstrap';\r\nimport { useContext, useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport Promise from 'bluebird';\r\n\r\nimport { SessionContext } from './context';\r\nimport { Login } from './service';\r\n\r\nexport function LoginPage() {\r\n    const [username, setusername] = useState(null);\r\n    const [password, setpassword] = useState(null);\r\n    const [authErr, setAuthErr] = useState(false);\r\n\r\n    let history = useHistory();\r\n\r\n    const context = useContext(SessionContext)\r\n\r\n    const usernamechanged = (e) => {\r\n        setusername(e.target.value);\r\n    }\r\n\r\n    const passwordchanged = (e) => {\r\n        setpassword(e.target.value);\r\n    }\r\n\r\n    const loginCallback = (response) => {\r\n        if (response) {\r\n            var decoded = jwt_decode(response);\r\n            console.log(context);\r\n            context.updateContext({\r\n                userId: decoded.userid,\r\n                userName: decoded.username,\r\n                folderId: decoded.rootfolderid,\r\n                token: response,                \r\n            });\r\n            history.push('/')\r\n            // parse JWT token and populate data into global context\r\n        } else {\r\n            setAuthErr(false);\r\n        }\r\n    };\r\n\r\n    const loginErrorCallback = (status) => {\r\n        setAuthErr(true);\r\n    };\r\n\r\n    const login = () => {\r\n        // hash password\r\n        const passwordStream = new TextEncoder().encode(password);\r\n        Promise.resolve(crypto.subtle.digest('SHA-256', passwordStream)).then(hashBuffer => {\r\n            const hashArray = Array.from(new Uint8Array(hashBuffer));                     // convert buffer to byte array\r\n            const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join(''); // convert bytes to hex string\r\n            Login(username, hashHex, loginCallback, loginErrorCallback);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Welcome to MyDrive, or your drive! Please log in</h1>\r\n            <h2>if you have not registered before, please register first</h2>\r\n            <Link to=\"/register\">Switch to register</Link>\r\n            <br />\r\n            <br />\r\n            <h2>User name</h2>\r\n            <input className=\"username\" onChange={usernamechanged} />\r\n            <h2>Password</h2>\r\n            <input className=\"password\" type=\"password\" onChange={passwordchanged} />\r\n            <Button onClick={login}>Login</Button>\r\n            {authErr && <div>Authentication failed, please try again</div>}\r\n        </div>\r\n    )\r\n};\r\n","import { Redirect } from 'react-router-dom';\r\nimport { useContext, useState } from 'react';\r\nimport Promise from 'bluebird';\r\n\r\nimport { SessionContext } from './context';\r\nimport { listFolder } from './service';\r\n\r\nexport function HomePage() {\r\n    const [files, setFiles] = useState(null);\r\n\r\n    const callback = (response) => {\r\n        var list = JSON.parse(response);\r\n        setFiles(list);\r\n    };\r\n\r\n    const errorcallback = () => {\r\n\r\n    };\r\n    \r\n    const context = useContext(SessionContext);\r\n\r\n    if(!files) {\r\n        if (!context.globalContext || !context.globalContext.userId) {\r\n            return <Redirect to=\"/login\" />;\r\n        } else {\r\n            listFolder(\r\n                context.globalContext.userId,\r\n                context.globalContext.folderId,\r\n                context.globalContext.token,\r\n                callback,\r\n                errorcallback\r\n            );\r\n        }\r\n    }\r\n\r\n    if(!files || files.length === 0) {\r\n        return (<div>Seems you don't have anything here..</div>);\r\n    }\r\n    \r\n    return (<div>{`You have ${files.length} files here!`}</div>)\r\n};\r\n","\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { useContext, useState } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { SessionContext } from './context';\r\nimport { CreateUser } from './service';\r\n\r\nimport Promise from 'bluebird';\r\n\r\nexport function RegisterPage() {\r\n    const createAccount = () => {\r\n        // hash password\r\n        const passwordStream = new TextEncoder().encode(password1);\r\n        Promise.resolve(crypto.subtle.digest('SHA-256', passwordStream)).then(hashBuffer => {\r\n            const hashArray = Array.from(new Uint8Array(hashBuffer));                     // convert buffer to byte array\r\n            const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join(''); // convert bytes to hex string\r\n            CreateUser(userName, hashHex, createAccountCallback, createAccountErrorCallback);\r\n        });\r\n    };\r\n\r\n    const createAccountCallback = () => {\r\n        setusercreated(true);\r\n    };\r\n\r\n    const createAccountErrorCallback = (errorcode) => {\r\n        setusercreateerror(errorcode);\r\n    }\r\n\r\n    const usernamechanged = (e) => {\r\n        setUserName(e.target.value);\r\n    };\r\n\r\n    const password1changed = (e) => {\r\n        setPassword1(e.target.value);\r\n    };\r\n\r\n    const password2changed = (e) => {\r\n        setPassword2(e.target.value);\r\n    };\r\n\r\n    const [userName, setUserName] = useState(null);\r\n    const [password1, setPassword1] = useState(null);\r\n    const [password2, setPassword2] = useState(null);\r\n    const [usercreated, setusercreated] = useState(false);\r\n    const [usercreateerror, setusercreateerror] = useState(null);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Register MyDrive account here</h1>\r\n            <br />\r\n            <h2>User name</h2>\r\n            <input className=\"username\" onChange={usernamechanged} />\r\n            <h2>Password</h2>\r\n            <input className=\"password\" type=\"password\" onChange={password1changed} />\r\n            <h2>Repeat password</h2>\r\n            <input className=\"password2\" type=\"password\" onChange={password2changed} />\r\n            <br />\r\n            {password1 !== password2 &&\r\n                <div className=\"passwordunmatch\" >passwords don't match</div>\r\n            }\r\n            <Button disabled={!password1 || !password2 || password1 !== password2} onClick={createAccount}>Create account</Button>\r\n\r\n            {usercreated &&\r\n                <div><h2>Your account has been created successfully, please log in<Link to=\"/login\">Login</Link></h2>\r\n                </div>\r\n            }\r\n\r\n            {usercreateerror !== null && usercreateerror !== undefined && \r\n                <div><h2>Something went wrong, please try again</h2>\r\n                </div>}\r\n        </div>);\r\n};","import './App.css';\nimport React, { useContext, useState } from 'react';\nimport { Switch, Route, BrowserRouter as Router } from 'react-router-dom';\nimport _ from 'underscore';\n\nimport { SessionContext } from './context';\nimport { LoginPage } from './loginpage';\nimport { HomePage } from './homepage';\nimport { RegisterPage } from './registerpage';\n\nfunction App() {\n  const [context, setContext] = useState(null);\n\n  const updateContext = (newContext) => {\n    setContext(_.defaults(newContext, context));\n  };\n\n  return (\n    <SessionContext.Provider value={{ globalContext: context, updateContext }}>\n      <Router>\n        <Route path=\"/\">\n          <HomePage />\n        </Route>\n        <Route path=\"/login\">\n          <LoginPage />\n        </Route>\n        <Route path=\"/register\">\n          <RegisterPage />\n        </Route>\n      </Router>\n    </SessionContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}